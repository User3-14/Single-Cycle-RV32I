-- ALU Control Unit

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity Control_Unit is
	port (
			opcode	: in std_logic_vector(6 downto 0);
			func3		: in std_logic_vector(2 downto 0);
			func7		: in std_logic_vector(6 downto 0);
			ALU_op	: out std_logic_vector(3 downto 0);
			ALU_src	: out std_logic;
			reg_write	: out std_logic;
			mem_write	: out std_logic;
--			mem_read 	: out std_logic;
			mem_to_reg	: out std_logic;
			branch		: out std_logic
		);
end entity;

architecture behavioral of Control_Unit is
begin
	process(opcode)
	begin
		if (opcode="0000011") then				-- I-format
			ALU_src <= '1';
			reg_write <= '1';
			mem_write <= '0';
--			mem_read <= '1';
			mem_to_reg <= '1';
			branch <= '0';
			if (func3="000") then				-- lb
				ALU_op <= "0011";
			elsif (func3="001") then			-- lh
				ALU_op <= "0011";
			elsif (func3="010") then			-- lw
				ALU_op <= "0011";
			elsif (func3="100") then			-- lbu
				ALU_op <= "0011";
			else
				ALU_op <= "XXXX";
			end if;
		elsif (opcode="0010011") then			-- I-format
			ALU_src <= '1';
			reg_write <= '1';
			mem_write <= '0';
--			mem_read <= '0';
			mem_to_reg <= '0';
			branch <= '0';
			if (func3="000") then				-- addi
				ALU_op <= "0011";
			elsif (func3="001") then			-- slli
				ALU_op <= "0101";
			else
				ALU_op <= "XXXX";
			end if;
		elsif (opcode="0100011") then			-- S-format
			ALU_src <= '1';
			reg_write <= '0';
			mem_write <= '1';
--			mem_read <= '0';
			mem_to_reg <= '0';
			branch <= '0';
			if (func3="000") then				-- sb
				ALU_op <= "0011";
			elsif (func3="001") then			-- sh
				ALU_op <= "0011";
			elsif (func3="010") then			-- sw
				ALU_op <= "0011";
			else
				ALU_op <= "XXXX";
			end if;
		elsif (opcode="0110011") then			-- R-format
			ALU_src <= '0';
			reg_write <= '1';
			mem_write <= '0';
--			mem_read <= '0';
			mem_to_reg <= '0';
			branch <= '0';
			if (func3="000") then
				if (func7="0000000") then		-- add
					ALU_op <= "0011";
				elsif (func7="0000001") then	-- sub
					ALU_op <= "0100";
				else
					ALU_op <= "XXXX";
				end if;
			elsif (func3="001") then			-- sll
				ALU_op <= "0101";
			elsif (func3="100") then			-- xor
				ALU_op <= "0010";
			elsif (func3="101") then
				if (func7="0000000") then		-- srl
					ALU_op <= "0110";
				elsif (func7="0000001") then	-- sra
					ALU_op <= "0111";
				else
					ALU_op <= "XXXX";
				end if;
			elsif (func3="110") then			-- or
				ALU_op <= "0001";
			elsif (func3="111") then			-- and
				ALU_op <= "0000";
			else
				
			end if;
		elsif (opcode="1100011") then			-- SB-format
			ALU_src <= '0';
			reg_write <= '0';
			mem_write <= '0';
--			mem_read <= '0';
			mem_to_reg <= '0';
			branch <= '1';
			if (func3="000") then				-- beq
				ALU_op <= "0100";
			elsif (func3="100") then			-- blt
				ALU_op <= "1000";
			elsif (func3="101") then			-- bge
				ALU_op <= "1001";
			elsif (func3="110") then			-- bltu
				ALU_op <= "1010";
			elsif (func3="111") then			-- bgeu
				ALU_op <= "1011";
			else
				ALU_op <= "XXXX";
			end if;
		else
			ALU_op <= "XXXX";
			ALU_src <= '0';
			reg_write <= '0';
			mem_write <= '0';
--			mem_read <= '0';
			mem_to_reg <= '0';
			branch <= '0';
		end if;
	end process;
end architecture;